using System;
using System.Collections.Generic;
using HarmonyLib;
using UnityEngine;

public class LiteFarmingBootstrap : IModApi
{
    private static readonly string HarmonyId = "com.autogenerated.litefarming";

    public void InitMod(Mod modInstance)
    {
        LiteFarmingLogger.Log("LiteFarming bootstrap initializing");
        LiteFarmingRegistrar.Initialize(HarmonyId);
        ModEvents.GameStartDone.RegisterHandler(OnGameStartDone);
    }

    private static void OnGameStartDone()
    {
        LiteFarmingLogger.Log("Registering LiteFarming plants and stations");

        LiteFarmingRegistrar.RegisterPlant(new LiteFarmingPlantDefinition(
            prefabName: "litefarmingCloverPlant",
            harvestItem: "resourceLiteFarmingCloverLeaf",
            seedItem: "resourceLiteFarmingCloverSeed",
            requiredLight: 8,
            requiredMoisture: 4,
            growthHours: 48f));

        LiteFarmingRegistrar.RegisterPlant(new LiteFarmingPlantDefinition(
            prefabName: "litefarmingExoticRootPlant",
            harvestItem: "resourceLiteFarmingExoticRoot",
            seedItem: "resourceLiteFarmingExoticRootCutting",
            requiredLight: 6,
            requiredMoisture: 5,
            growthHours: 60f));

        LiteFarmingRegistrar.RegisterPlant(new LiteFarmingPlantDefinition(
            prefabName: "litefarmingSubterraneanAlgae",
            harvestItem: "resourceLiteFarmingSubterraneanAlgae",
            seedItem: "resourceLiteFarmingSubterraneanAlgaeSpore",
            requiredLight: 4,
            requiredMoisture: 7,
            growthHours: 54f));

        LiteFarmingRegistrar.RegisterStation(new LiteFarmingStationDefinition(
            blockName: "blockLiteFarmingFermenter",
            displayName: "LiteFarming Fermenter",
            craftArea: "liteFermenter"));

        LiteFarmingRegistrar.RegisterStation(new LiteFarmingStationDefinition(
            blockName: "blockLiteFarmingSmoker",
            displayName: "LiteFarming Smoker",
            craftArea: "liteSmoker"));

        LiteFarmingRegistrar.RegisterStation(new LiteFarmingStationDefinition(
            blockName: "blockLiteFarmingSlowCooker",
            displayName: "LiteFarming Slow Cooker",
            craftArea: "liteSlowCooker"));
    }
}

internal static class LiteFarmingRegistrar
{
    private static readonly Dictionary<string, LiteFarmingPlantDefinition> Plants = new();
    private static readonly Dictionary<string, LiteFarmingStationDefinition> Stations = new();
    private static Harmony harmonyInstance;

    public static void Initialize(string harmonyId)
    {
        if (harmonyInstance != null)
        {
            return;
        }

        harmonyInstance = new Harmony(harmonyId);
        harmonyInstance.PatchAll();
        LiteFarmingLogger.Log("Harmony patches applied for LiteFarming");
    }

    public static void RegisterPlant(LiteFarmingPlantDefinition definition)
    {
        if (Plants.ContainsKey(definition.PrefabName))
        {
            LiteFarmingLogger.Warning($"Plant {definition.PrefabName} already registered, skipping duplicate to avoid overwriting War3zuk items.");
            return;
        }

        Plants.Add(definition.PrefabName, definition);
        LiteFarmingLogger.Log($"Plant registered: {definition.PrefabName}");
    }

    public static void RegisterStation(LiteFarmingStationDefinition definition)
    {
        if (Stations.ContainsKey(definition.BlockName))
        {
            LiteFarmingLogger.Warning($"Station {definition.BlockName} already registered, skipping duplicate.");
            return;
        }

        Stations.Add(definition.BlockName, definition);
        LiteFarmingLogger.Log($"Station registered: {definition.BlockName}");
    }

    public static bool TryGetPlant(BlockValue blockValue, out LiteFarmingPlantDefinition definition)
    {
        if (blockValue.Block == null)
        {
            definition = null;
            return false;
        }

        return Plants.TryGetValue(blockValue.Block.GetBlockName(), out definition);
    }
}

[HarmonyPatch(typeof(BlockPlantGrowing), nameof(BlockPlantGrowing.CheckPlantRequirements))]
internal static class LiteFarmingPlantRequirementPatch
{
    private static readonly Vector3Int[] WaterCheckOffsets =
    {
        new Vector3Int(1, 0, 0),
        new Vector3Int(-1, 0, 0),
        new Vector3Int(0, 0, 1),
        new Vector3Int(0, 0, -1),
        new Vector3Int(0, -1, 0)
    };

    private static void Postfix(ref bool __result, BlockValue blockValue, WorldBase world, Vector3i position, bool bFullQualityCheck)
    {
        if (!LiteFarmingRegistrar.TryGetPlant(blockValue, out var definition))
        {
            return;
        }

        try
        {
            var light = world.GetBlockLightValue(position);
            var hasRequiredLight = light >= definition.RequiredLight;

            var hasWater = false;
            foreach (var offset in WaterCheckOffsets)
            {
                var neighborPos = position + new Vector3i(offset);
                var neighbor = world.GetBlock(neighborPos);
                if (neighbor.Block is BlockLiquidv2)
                {
                    hasWater = true;
                    break;
                }
            }

            var timePassed = world.worldTime - blockValue.meta;
            var growthHours = timePassed / 1000f;
            var hasTime = growthHours >= definition.GrowthHours;

            __result = hasRequiredLight && hasWater && hasTime;
        }
        catch (Exception e)
        {
            LiteFarmingLogger.Error($"Failed to validate growth requirements for {definition.PrefabName}: {e}");
        }
    }
}

internal sealed class LiteFarmingPlantDefinition
{
    public LiteFarmingPlantDefinition(string prefabName, string harvestItem, string seedItem, int requiredLight, int requiredMoisture, float growthHours)
    {
        PrefabName = prefabName;
        HarvestItem = harvestItem;
        SeedItem = seedItem;
        RequiredLight = requiredLight;
        RequiredMoisture = requiredMoisture;
        GrowthHours = growthHours;
    }

    public string PrefabName { get; }
    public string HarvestItem { get; }
    public string SeedItem { get; }
    public int RequiredLight { get; }
    public int RequiredMoisture { get; }
    public float GrowthHours { get; }
}

internal sealed class LiteFarmingStationDefinition
{
    public LiteFarmingStationDefinition(string blockName, string displayName, string craftArea)
    {
        BlockName = blockName;
        DisplayName = displayName;
        CraftArea = craftArea;
    }

    public string BlockName { get; }
    public string DisplayName { get; }
    public string CraftArea { get; }
}

internal static class LiteFarmingLogger
{
    private const string Prefix = "[LiteFarming] ";

    public static void Log(string message)
    {
        Debug.Log(Prefix + message);
    }

    public static void Warning(string message)
    {
        Debug.LogWarning(Prefix + message);
    }

    public static void Error(string message)
    {
        Debug.LogError(Prefix + message);
    }
}
